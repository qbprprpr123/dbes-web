在组建使用的时候，
如果使用的是redux：
1、需要创建上下文对象，基于其Provider把创建的store放在根组件的上下文信息中；后代组件需要给予上下文对象，获取到上下文中的store
2、需要用到公共状态的组件
    + store.getState() 获取公共状态
    + store.subscribe(让组件更新的函数) 放在事件池中
3、需要派发的组件：
    + store.dispatch(actionCreator)

react-redux帮助我们简化redux在组件中的应用
1、提供Provider组件，可以自己在内部创建上下文，把store放在根组件的上下文中
2、提供connect函数，在函数内部，可以获取到上下文的store，然后快速的把公共状态，以及需要派发的操作，基于属性传递给组件。
     connect(mapStateToProps, mapActionToProps);

涉及的原理和源码：
redux
    + createStore
    + combineReducers
    + bindActionCreators

redux在设计上，存在一些不好的地方：
    + 我们基于getState获取的公共状态，是直接和redux中的公共状态共用相同的堆地址，这样导致可以直接修改公共状态信息。
    + 我们会把让组件更新的方法放在事件池中，当公共状态改变会通知事件池中的所有方法执行，相关的组件全部都要进行更新。
       如果要优化，我们在向事件池中加入方法的时候，把依赖的信息也同时设置，对前后state状态进行比较，改变了才执行。
       然而真实项目中，我们在配合react-router操作的时候，虽然按照原有逻辑，无论改变什么状态事件池中的方法都会触发执行，但是react-router会让很多组件释放掉，只展示当前模块的组件，这样即便组件更新的方法执行，但是因为组件都释放了，所以也不会产生太大的影响，而且我们在组件释放的时候，把对应更新的方法，从事件池中移除掉
    +所有的reducer的合并，并不是代码的合并，而是创建一个总的reducer出来，每一次派发，都是让总的reducer执行，而在这里，会把每个模块的reducer都完整执行一遍，即使中间已经发现匹配的逻辑，也会继续把其他模块中的reducer执行。